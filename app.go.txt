// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"io"
// 	"io/ioutil"
// 	"log"
// 	"net/http"
// 	"net/url"
// 	"os"
// 	"strings"
// 	"time"

// 	"github.com/charmbracelet/bubbles/list"
// 	"github.com/charmbracelet/bubbles/spinner"
// 	tea "github.com/charmbracelet/bubbletea"
// 	"github.com/charmbracelet/lipgloss"
// )

// const listHeight = 14

// var (
// 	titleStyle        = lipgloss.NewStyle().MarginLeft(2)
// 	itemStyle         = lipgloss.NewStyle().PaddingLeft(4)
// 	selectedItemStyle = lipgloss.NewStyle().PaddingLeft(2).Foreground(lipgloss.AdaptiveColor{Light: "#F72585", Dark: "#7209B7"})
// 	paginationStyle   = list.DefaultStyles().PaginationStyle.PaddingLeft(4)
// 	helpStyle         = list.DefaultStyles().HelpStyle.PaddingLeft(4).PaddingBottom(1)
// 	quitTextStyle     = lipgloss.NewStyle().Margin(1, 0, 2, 4)
// 	spinnerStyle      = lipgloss.NewStyle().Foreground(lipgloss.Color("69"))
// 	strikedStyle      = lipgloss.NewStyle().
// 				Strikethrough(true).
// 				Foreground(lipgloss.Color("240"))
// )

// type item struct {
// 	title     string
// 	completed bool
// }

// func (i item) FilterValue() string { return i.title }

// type itemDelegate struct{}

// func (d itemDelegate) Height() int                             { return 1 }
// func (d itemDelegate) Spacing() int                            { return 0 }
// func (d itemDelegate) Update(_ tea.Msg, _ *list.Model) tea.Cmd { return nil }
// func (d itemDelegate) Render(w io.Writer, m list.Model, index int, listItem list.Item) {
// 	i, ok := listItem.(item)
// 	if !ok {
// 		return
// 	}

// 	str := fmt.Sprintf("%d. %s", index+1, i.title)

// 	if i.completed {
// 		str = strikedStyle.Render(str)
// 	}

// 	fn := itemStyle.Render
// 	if index == m.Index() {
// 		fn = func(s ...string) string {
// 			return selectedItemStyle.Render("> " + strings.Join(s, " "))
// 		}
// 	}

// 	fmt.Fprint(w, fn(str))
// }

// type model struct {
// 	list     list.Model
// 	choice   string
// 	quitting bool
// 	loading  bool
// 	spinner  spinner.Model
// }

// func initialModel() model {
// 	s := spinner.New()
// 	s.Spinner = spinner.Globe
// 	s.Style = spinnerStyle

// 	return model{
// 		loading: true,
// 		spinner: s,
// 	}
// }

// func (m model) Init() tea.Cmd {
// 	return m.spinner.Tick
// }

// func (m model) View() string {
// 	if m.loading {
// 		return fmt.Sprintf("\n %s Loading your Todoist tasks...\n", m.spinner.View())
// 	}
// 	if m.choice != "" {
// 		return quitTextStyle.Render(fmt.Sprintf("%s? Sounds good to me.", m.choice))
// 	}
// 	if m.quitting {
// 		return quitTextStyle.Render("Not hungry? That's cool.")
// 	}
// 	return "\n" + m.list.View()
// }

// func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
// 	switch msg := msg.(type) {
// 	case spinner.TickMsg:
// 		var cmd tea.Cmd
// 		m.spinner, cmd = m.spinner.Update(msg)
// 		return m, cmd
// 	case tea.WindowSizeMsg:
// 		if !m.loading {
// 			m.list.SetWidth(msg.Width)
// 		}
// 		return m, nil
// 	case list.Model:
// 		m.list = msg
// 		m.loading = false
// 		return m, nil
// 	case tea.KeyMsg:
// 		if m.loading {
// 			return m, nil
// 		}
// 		switch keypress := msg.String(); keypress {
// 		case "q", "ctrl+c":
// 			m.quitting = true
// 			return m, tea.Quit
// 		case "enter":
// 			i, ok := m.list.SelectedItem().(item)
// 			if ok {
// 				m.choice = string(i.title)
// 			}
// 			return m, tea.Quit
// 		case " ": // Space key
// 			if i, ok := m.list.SelectedItem().(item); ok {
// 				items := m.list.Items()
// 				i.completed = !i.completed
// 				items[m.list.Index()] = i
// 				m.list.SetItems(items)
// 			}
// 		}
// 	}

// 	if !m.loading {
// 		var cmd tea.Cmd
// 		m.list, cmd = m.list.Update(msg)
// 		return m, cmd
// 	}

// 	return m, nil
// }

// type Project struct {
// 	Id           string `json:"id"`
// 	Name         string `json:"name"`
// 	CommentCount int    `json:"comment_count"`
// 	Order        int    `json:"order"`
// 	Color        string `json:"color"`
// 	IsShared     bool   `json:"is_shared"`
// 	IsFavorite   bool   `json:"is_favorite"`
// 	ParentId     int    `json:"parent_id"`
// 	IsInbox      bool   `json:"is_inbox_project"`
// 	IsTeamInbox  bool   `json:"is_team_inbox"`
// 	ViewStyle    string `json:"view_style"`
// 	URL          string `json:"url"`
// }

// type Task struct {
// 	Id           string    `json:"id"`
// 	ProjectId    string    `json:"project_id"`
// 	Content      string    `json:"content"`
// 	Description  string    `json:"description"`
// 	Completed    bool      `json:"completed"`
// 	LabelIds     []string  `json:"label_ids"`
// 	Priority     int       `json:"priority"`
// 	CommentCount int       `json:"comment_count"`
// 	CreatedAt    time.Time `json:"created_at"`
// 	Due          struct {
// 		Date string `json:"date"`
// 	} `json:"due"`
// }

// type TodoistAppConfig struct {
// 	Token            string
// 	PROJECT_URL_PATH string
// 	TASK_URL_PATH    string
// }

// type TodoistApp struct {
// 	Config  TodoistAppConfig
// 	BaseURL string
// }

// func NewTodoistApp(config TodoistAppConfig) TodoistApp {
// 	return TodoistApp{
// 		Config:  config,
// 		BaseURL: "https://api.todoist.com/rest/v2",
// 	}
// }

// func (app *TodoistApp) resolveFeatureURL(feature string) string {
// 	switch feature {
// 	case "projects":
// 		return app.BaseURL + "/" + app.Config.PROJECT_URL_PATH
// 	case "tasks":
// 		return app.BaseURL + "/" + app.Config.TASK_URL_PATH
// 	default:
// 		return app.BaseURL + "/" + feature
// 	}
// }

// func (app *TodoistApp) makePostRequest(feature string, data url.Values) ([]byte, error) {
// 	client := &http.Client{
// 		Timeout: time.Second * 10,
// 	}
// 	req, err := http.NewRequest("POST", app.BaseURL, nil)
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	req.Header.Add("Authorization", "Bearer "+app.Config.Token)
// 	resp, err := client.Do(req)
// 	if err != nil {
// 		log.Fatal(err)
// 		return nil, err
// 	}
// 	defer resp.Body.Close()
// 	body, err := ioutil.ReadAll(resp.Body)
// 	if err != nil {
// 		log.Fatal(err)
// 		return nil, err
// 	}
// 	return body, nil
// }

// func (app *TodoistApp) makeGetRequest(feature string) ([]byte, error) {
// 	client := &http.Client{
// 		Timeout: time.Second * 10,
// 	}
// 	url := app.resolveFeatureURL(feature)
// 	req, err := http.NewRequest("GET", url, nil)
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	req.Header.Add("Authorization", "Bearer "+app.Config.Token)
// 	resp, err := client.Do(req)
// 	if err != nil {
// 		log.Fatal(err)
// 		return nil, err
// 	}
// 	defer resp.Body.Close()

// 	body, err := ioutil.ReadAll(resp.Body)
// 	if err != nil {
// 		log.Fatal(err)
// 		return nil, err
// 	}
// 	return body, nil
// }

// func (app TodoistApp) GetProjects() ([]Project, error) {
// 	body, err := app.makeGetRequest("projects")
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	var projects []Project
// 	err = json.Unmarshal(body, &projects)
// 	if err != nil {
// 		log.Fatal(err)
// 		return projects, err
// 	}
// 	return projects, nil
// }

// func (app TodoistApp) GetTasks() ([]Task, error) {
// 	body, err := app.makeGetRequest("tasks")
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	var tasks []Task
// 	err = json.Unmarshal(body, &tasks)
// 	if err != nil {
// 		log.Fatal(err)
// 		return tasks, err
// 	}
// 	return tasks, nil
// }

// func main() {
// 	p := tea.NewProgram(initialModel())

// 	go func() {
// 		config := TodoistAppConfig{
// 			Token:            os.Getenv("TODOIST_TOKEN"),
// 			PROJECT_URL_PATH: "projects",
// 			TASK_URL_PATH:    "tasks",
// 		}
// 		app := NewTodoistApp(config)
// 		tasks, _ := app.GetTasks()

// 		choices := []list.Item{}
// 		for _, task := range tasks {
// 			// append only today date due tasks
// 			if task.Due.Date == time.Now().Format("2006-01-02") {
// 				choices = append(choices, item{title: task.Content, completed: task.Completed})
// 			}
// 		}

// 		l := list.New(choices, itemDelegate{}, 30, listHeight)
// 		l.Title = "Your Todoist Tasks"
// 		l.SetShowStatusBar(false)
// 		l.SetFilteringEnabled(false)
// 		l.Styles.Title = titleStyle
// 		l.Styles.PaginationStyle = paginationStyle
// 		l.Styles.HelpStyle = helpStyle

// 		p.Send(l)
// 	}()

// 	if _, err := p.Run(); err != nil {
// 		fmt.Printf("Error running program: %v", err)
// 		os.Exit(1)
// 	}
// }
